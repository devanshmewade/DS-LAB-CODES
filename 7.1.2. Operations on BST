#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *left, *right;
};

typedef struct node *BSTNODE;

// Function to create a new node
BSTNODE newNodeInBST(int item) {
    BSTNODE temp = (BSTNODE)malloc(sizeof(struct node));
    temp->data = item;
    temp->left = temp->right = NULL;
    return temp;
} BSTNODE insertNodeInBST(BSTNODE node, int ele) {
    if (node == NULL) {
        printf("Successfully inserted.\n");
        return newNodeInBST(ele);
    }
    if (ele < node->data) {
        node->left = insertNodeInBST(node->left, ele);
    } else if (ele > node->data) {
        node->right = insertNodeInBST(node->right, ele);
    }
    return node;
}

// Function to perform in-order traversal
void inorderInBST(BSTNODE root) {
    if (root != NULL) {
        inorderInBST(root->left);
        printf("%d ", root->data);
        inorderInBST(root->right);
    }
}
}
void preorderInBST(BSTNODE root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorderInBST(root->left);
        preorderInBST(root->right);
    }
}

// Function to perform post-order traversal
void postorderInBST(BSTNODE root) {
    if (root != NULL) {
        postorderInBST(root->left);
        postorderInBST(root->right);
        printf("%d ", root->data);
    }
}

// Function to search for an element in BST
BSTNODE searchNodeInBST(BSTNODE root, int ele) {
    if (root == NULL) {
        return NULL;
    }
    if (root->data == ele) {
        return root;
    }
    if (ele < root->data) {
        return searchNodeInBST(root->left, ele);
    } else {
        return searchNodeInBST(root->right, ele);
    }
}
// Function to display the menu
void displayMenu() {
    printf("\n1.Insert\n");
    printf("2.Inorder Traversal\n");
    printf("3.Preorder Traversal\n");
    printf("4.Postorder Traversal\n");
    printf("5.Search an element\n");
    printf("6.Exit\n");
}


          /*struct node {
	int data;
	struct node *left, *right;
};
  
typedef struct node *BSTNODE;

BSTNODE newNodeInBST(int item) {
	BSTNODE temp =  (BSTNODE)malloc(sizeof(struct node));
	temp->data = item;
	temp->left = temp->right = NULL;
	return temp;
}
  
void inorderInBST(BSTNODE root) {
	//write your code here..
	
}
void preorderInBST(BSTNODE root) {
	//write your code here..
	
}
void postorderInBST(BSTNODE root) {
	//write your code here..
	
    
}
BSTNODE insertNodeInBST(BSTNODE node, int ele) {
	//write your code here..
	
	
}

BSTNODE searchNodeInBST(BSTNODE root, int ele) {
	//write your code here..
	
	
}*/
